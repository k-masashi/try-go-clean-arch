// Code generated by MockGen. DO NOT EDIT.
// Source: course.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/k-masashi/try-go-clean-arch/app/domain"
	port "github.com/k-masashi/try-go-clean-arch/app/usecase/port"
	reflect "reflect"
)

// MockCourseInputPort is a mock of CourseInputPort interface
type MockCourseInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCourseInputPortMockRecorder
}

// MockCourseInputPortMockRecorder is the mock recorder for MockCourseInputPort
type MockCourseInputPortMockRecorder struct {
	mock *MockCourseInputPort
}

// NewMockCourseInputPort creates a new mock instance
func NewMockCourseInputPort(ctrl *gomock.Controller) *MockCourseInputPort {
	mock := &MockCourseInputPort{ctrl: ctrl}
	mock.recorder = &MockCourseInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseInputPort) EXPECT() *MockCourseInputPortMockRecorder {
	return m.recorder
}

// GetCourses mocks base method
func (m *MockCourseInputPort) GetCourses() (*port.GetCoursesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourses")
	ret0, _ := ret[0].(*port.GetCoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses
func (mr *MockCourseInputPortMockRecorder) GetCourses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockCourseInputPort)(nil).GetCourses))
}

// GetCourse mocks base method
func (m *MockCourseInputPort) GetCourse(arg0 *port.GetCourseRequest) (*port.GetCourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", arg0)
	ret0, _ := ret[0].(*port.GetCourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse
func (mr *MockCourseInputPortMockRecorder) GetCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockCourseInputPort)(nil).GetCourse), arg0)
}

// MockCourseOutputPort is a mock of CourseOutputPort interface
type MockCourseOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCourseOutputPortMockRecorder
}

// MockCourseOutputPortMockRecorder is the mock recorder for MockCourseOutputPort
type MockCourseOutputPortMockRecorder struct {
	mock *MockCourseOutputPort
}

// NewMockCourseOutputPort creates a new mock instance
func NewMockCourseOutputPort(ctrl *gomock.Controller) *MockCourseOutputPort {
	mock := &MockCourseOutputPort{ctrl: ctrl}
	mock.recorder = &MockCourseOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourseOutputPort) EXPECT() *MockCourseOutputPortMockRecorder {
	return m.recorder
}

// GetCourses mocks base method
func (m *MockCourseOutputPort) GetCourses(arg0 []domain.Course) (*port.GetCoursesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourses", arg0)
	ret0, _ := ret[0].(*port.GetCoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses
func (mr *MockCourseOutputPortMockRecorder) GetCourses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockCourseOutputPort)(nil).GetCourses), arg0)
}

// GetCourse mocks base method
func (m *MockCourseOutputPort) GetCourse(arg0 *domain.Course) (*port.GetCourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", arg0)
	ret0, _ := ret[0].(*port.GetCourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse
func (mr *MockCourseOutputPortMockRecorder) GetCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockCourseOutputPort)(nil).GetCourse), arg0)
}
